!function(){"use strict";const e=new class{constructor({baseUrl:e,headers:t}){this._baseUrl=e,this._headers=t,this._authorization=t.authorization}renderResults(e){r.textContent=e.name,n.textContent=e.about,s.src=e.avatar}defaultProfile(){return fetch(`${this._baseUrl}/users/me`,{headers:{authorization:this._authorization}}).then((e=>e.ok?e.json():Promise.reject(e.status))).then((e=>{this.renderResults(e)})).catch((e=>{console.log(`Error: ${e}`)}))}editProfile(e){return fetch(`${this._baseUrl}/users/me`,{method:"PATCH",headers:{authorization:this._authorization,"content-Type":"application/json"},body:JSON.stringify({name:e.name,about:e.about})}).then((e=>e.ok?(console.log("todo ok"),e.json()):Promise.reject(e.status))).then((e=>{console.log(e)})).catch((e=>{console.log(`Error: ${e}`)}))}updateAvatar(e){return fetch(`${this._baseUrl}/users/me/avatar`,{method:"PATCH",headers:{authorization:this._authorization,"content-Type":"application/json"},body:JSON.stringify({avatar:e.avatar})}).then((e=>e.ok?(console.log("todo ok"),e.json()):Promise.reject(e.status))).catch((e=>{console.log(`Error: ${e}`)}))}addLike(e){return fetch(`${this._baseUrl}/cards/likes/${e}`,{method:"PUT",headers:{authorization:this._authorization,"content-Type":"application/json"},body:JSON.stringify({name:profile.name,about:profile.about})}).then((e=>e.ok?(console.log("todo ok"),e.json()):Promise.reject(e.status))).catch((e=>{console.log(`Error: ${e}`)}))}deleteLike(e){return fetch(`${this._baseUrl}/cards/likes/${e}`,{method:"DELETE",headers:{authorization:this._authorization,"content-Type":"application/json"},body:JSON.stringify({name:profile.name,about:profile.about})}).then((e=>e.ok?(console.log("todo ok"),e.json()):Promise.reject(e.status))).catch((e=>{console.log(`Error: ${e}`)}))}cardsAddedRequest(){return fetch(`${this._baseUrl}/cards`,{headers:{authorization:this._authorization}})}addNewCardPetition(e){return fetch(`${this._baseUrl}/cards`,{method:"POST",headers:{authorization:this._authorization,"content-Type":"application/json"},body:JSON.stringify({name:e.placeName,link:e.link})}).then((e=>e.ok?e.json():Promise.reject(`Error: ${e.status}`))).catch((e=>{console.log(`Error: ${e}`)}))}deleteCard(e){return fetch(`${this._baseUrl}/cards/${e}`,{method:"DELETE",headers:{authorization:this._authorization,"content-Type":"application/json"}}).then((e=>e.ok?(console.log("todo ok"),e.json()):Promise.reject(e.status))).catch((e=>{console.log(`Error: ${e}`)}))}returnCardInfo(e){return fetch(`${this._baseUrl}/cards/${e}`,{method:"GET",headers:{authorization:this._authorization}}).then((e=>e.ok?(console.log("todo ok"),e.json()):Promise.reject(e.status))).catch((e=>{console.log(`Error: ${e}`)}))}}({baseUrl:"https://around.nomoreparties.co/v1/web_es_07/",headers:{authorization:"d73ff8a4-5ad7-42cb-999c-d084ca2e6847","content-Type":"application/json"}}),t=document.querySelector(".edit-button"),o=(document.querySelector(".form__submit-button"),document.querySelector(".form__close-button"),document.querySelector(".popup_type_edit-profile")),r=document.querySelector(".profile__user-name"),n=document.querySelector(".profile__user-profession"),s=document.querySelector(".profile__avatar"),i=(document.querySelector("#name-input"),document.querySelector("#about-me-input"),document.querySelector(".add-button")),a=(document.querySelector(".form__close-button_type_new-place"),document.querySelector(".popup_type_new-place")),c=(document.querySelector(".form__submit-button_place"),document.querySelector(".card-container"),document.querySelector(".popup_type_photo")),l=document.querySelector(".popup__photo"),u=document.querySelector(".popup__photo-caption"),d=document.querySelector(".popup__close-button"),h=document.querySelector(".form__submit-button_delete"),p=document.querySelector(".popup_type_delete"),_=document.querySelector(".form__close-button_type_delete"),m=document.querySelector(".popup_type_update-avatar"),f=document.querySelector(".profile__avatar-overlay"),y=document.querySelector(".profile__avatar");class b{constructor({items:e,renderer:t},o){this._itemsArray=e,this._renderer=t,this._container=o}addItem(e){this._container.prepend(e)}renderItems(){this._itemsArray.forEach((e=>{this._renderer(e)}))}}const S=/^[A-Za-z\-]{2,100}$/,v=/^[A-Za-z\-]{2,20}$/,g=/^[A-Za-z\-]{3,20}$/,E=/^[A-Za-z\-]{4,500}$/,k=/^[A-Za-z\-]{4,500}$/;class q{constructor(e){this._formSelector=e.formSelector,this._inputSelector=e.inputSelector,this._submitButtonSelector=e.submitButtonSelector,this._inactiveButtonClass=e.inactiveButtonClass,this._inputErrorClass=e.inputErrorClass,this._errorClass=e.errorClass}switchingInput(e){switch(e.target.name){case"name":this._checkInputValidity(S,e.target,this._formSelector);break;case" aboutMe":this._checkInputValidity(v,e.target,this._formSelector);break;case"placeName":this._checkInputValidity(g,e.target,this._formSelector);break;case"link":this._checkInputValidity(E,e.target,this._formSelector);break;case"updateAvatar":this._checkInputValidity(k,e.target,this._formSelector)}}_checkInputValidity(e,t,o){const r=document.getElementById(o).querySelector(`.${t.id}-error`);e.test(t.value)?(r.classList.remove(this._errorClass),t.classList.remove(this._inputErrorClass),r.textContent=""):(r.textContent=t.validationMessage,r.classList.add(this._errorClass),t.classList.add(this._inputErrorClass))}isValid(e){let t="";const o=document.getElementById(e);return t=!!Array.from(o.querySelectorAll(this._inputSelector)).every((e=>e.validity.valid)),t}toggleBtnState(e){const t=document.getElementById(e).querySelector(this._submitButtonSelector);!0===this.isValid(e)?t.classList.remove(this._inactiveButtonClass):t.classList.add(this._inactiveButtonClass)}enableValidation(){const e=document.getElementById(this._formSelector),t=Array.from(e.querySelectorAll(this._inputSelector));this.toggleBtnState(this._formSelector),t.forEach((e=>{e.addEventListener("input",(e=>{this.switchingInput(e),this.toggleBtnState(this._formSelector)}))}))}}const C=document.querySelector(".card-container");class L{constructor({data:e,photoHandler:t,deleteHandler:o},r){this._name=e.name,this._link=e.link,this._id=e._id,this._likes=e.likes,this._templateSelector=r,this._photoHandler=t,this._deleteHandler=o,this._likes=e.likes}getTemplate(){return document.querySelector(this._templateSelector).content.querySelector(".place-card").cloneNode(!0)}generateCard(){return this._cardElement=this.getTemplate(),this._cardElement.querySelector(".place-card__name").textContent=this._name,this._cardElement.querySelector(".place-card__photo").src=this._link,this._cardElement.id=this._id,this._cardElement.querySelector(".like-button-counter").textContent=this._likes.length,this._setEventListeners(),this._cardElement}_handleOpenPopup(){this._photoHandler(this._link,this._name)}_handleClosePopup(){l.src=" ",u.textContent=" ",c.classList.remove("popup_opened")}likeadding(){}_setEventListeners(){this._cardElement.querySelector(".place-card__photo").addEventListener("click",(()=>{this._handleOpenPopup()})),d.addEventListener("click",(()=>{this._handleClosePopup()})),this._cardElement.querySelector(".trash-button").addEventListener("click",(e=>{this._deleteHandler(this._cardElement.id)})),this._cardElement.querySelector(".like-button").addEventListener("click",(t=>{t.target.classList.toggle("like-button_active"),t.target.classList.contains("like-button_active")?e.addLike(this._cardElement.id).then((e=>{let t=e.likes;this._cardElement.querySelector(".like-button-counter").textContent=t.length})):e.deleteLike(this._cardElement.id).then((e=>{console.log(e);const t=e.likes;this._cardElement.querySelector(".like-button-counter").textContent=t.length}))}))}trashBtnFunctions(){this._cardElement.querySelector(".trash-button").closest(".place-card").remove()}test(){console.log(this._id)}}class ${constructor(e){this._popup=e,this._form=e.querySelector(".form")}open(){this._popup.classList.add("popup_opened")}close(){this._popup.classList.remove("popup_opened")}_handleEscClose(){document.addEventListener("keydown",(e=>{e.preventDefault,"Escape"===e.key&&this.close()}))}setEventListeners(e){e.addEventListener("click",(()=>{this.open()})),this._handleEscClose(),this._form.querySelector(".form__close-button").addEventListener("click",(e=>{e.preventDefault(),this.close()}))}}class I extends ${constructor(e){super(e)}open(e,t){super.open(),this._photo=document.querySelector(".popup__photo").src=e,this._caption=document.querySelector(".popup__photo-caption").textContent=t}test(){console.log("desde test de popimage")}}class P extends ${constructor({formSubmitHandler:e},t){super(t),this._formSubmitHandler=e,this._form=this._popup.querySelector(".form")}close(){super.close(),this._form.id,this._form.reset(),this._popup.querySelector(".overlay").addEventListener("click",(e=>{this._popup.classList.remove("popup_opened"),e.stopImmediatePropagation()}))}getInputValues(){this._inputList=this._form.querySelectorAll(".form__input");const e={};return this._inputList.forEach((t=>{e[t.name]=t.value})),e}setEventListeners(e){this.getInputValues(),super.setEventListeners(e),this._form.addEventListener("submit",(e=>{e.preventDefault(),e.stopImmediatePropagation(),this._formSubmitHandler(this.getInputValues()),document.forms.place.reset()}))}test(){console.log("desde test popup with form")}renderLoading(e){e?this._form.querySelector(".form__submit-button").textContent="Guardando...":(this._form.querySelector(".form__submit-button").textContent="Guardado",this.close())}}class z{constructor({data:e}){this._userName=e.name,this._userAboutMe=e["about-me"]}getUserInfo(){this._userName=r.textContent,this._userAboutMe=n.textContent}setUserInfo(){r.textContent=this._userName,n.textContent=this._userAboutMe}}class j extends ${constructor({submitHandler:e},t){super(t),this._submitHandler=e,this._form=this._popup.querySelector(".form")}setEventListeners(){h.addEventListener("click",(e=>{e.preventDefault(),e.stopImmediatePropagation(),console.log("desde set eventListeners"),this._submitHandler(),this.close()})),_.addEventListener("click",(e=>{e.preventDefault(),console.log("diste click a cverrar popup"),this.close()}))}submitFunctions(){h.addEventListener("click",(e=>{e.preventDefault(),e.stopImmediatePropagation(),this._submitHandler(),this.close()})),_.addEventListener("click",(e=>{e.preventDefault(),console.log("diste click a cverrar popup"),this.close()}))}}new q({formSelector:"profile",inputSelector:".form__input",submitButtonSelector:".form__submit-button",inactiveButtonClass:"form__submit-button_inactive",inputErrorClass:"form__input_type_error",errorClass:"form__input-error_active"}).enableValidation(),new q({formSelector:"place",inputSelector:".form__input",submitButtonSelector:".form__submit-button",inactiveButtonClass:"form__submit-button_inactive",inputErrorClass:"form__input_type_error",errorClass:"form__input-error_active"}).enableValidation(),new q({formSelector:"avatar",inputSelector:".form__input",submitButtonSelector:".form__submit-button",inactiveButtonClass:"form__submit-button_inactive",inputErrorClass:"form__input_type_error",errorClass:"form__input-error_active"}).enableValidation(),e.defaultProfile();const w=new P({formSubmitHandler:t=>{w.renderLoading(!0),e.editProfile({name:t.name,about:t["about-me"]}).finally((()=>{w.renderLoading(!1)}));const o=new z({data:t});o.setUserInfo(),o.getUserInfo()}},o);w.setEventListeners(t);const H=[];e.cardsAddedRequest().then((e=>e.ok?e.json():Promise.reject(e.status))).then((t=>{!function(t){t.forEach((e=>{H.push(e)}));const o=new b({items:H,renderer:t=>{const r=new L({data:t,photoHandler:(e,t)=>{new I(c).open(e,t)},deleteHandler:t=>{const o=new j({submitHandler:()=>{e.deleteCard(t).then((e=>{})),r.trashBtnFunctions()}},p);o.setEventListeners(),o.open()}},"#card-template"),n=r.generateCard();o.addItem(n)}},C);o.renderItems()}(t)})).catch((e=>{console.log(`Error: ${e}`)})),function(){const t=new P({formSubmitHandler:o=>{t.renderLoading(!0),e.addNewCardPetition(o).then((o=>{document.querySelector(".card-container").prepend(function(t){const o=new L({data:t,photoHandler:(e,t)=>{new I(c).open(e,t)},deleteHandler:t=>{const r=new j({submitHandler:()=>{e.deleteCard(t),o.trashBtnFunctions(),console.log(t)}},p);r.submitFunctions(),console.log(t),r.open()}},"#card-template");return o.generateCard()}(o)),t.close()})).finally((()=>{w.renderLoading(!1)}))}},a);t.setEventListeners(i)}();const A=new P({formSubmitHandler:t=>{A.renderLoading(!0),e.updateAvatar({avatar:t.updateAvatar}).then((e=>{var t;t=e.avatar,y.src=t})).finally((()=>{A.renderLoading(!1)}))}},m);A.setEventListeners(f)}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,